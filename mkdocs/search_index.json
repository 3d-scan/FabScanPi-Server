{
    "docs": [
        {
            "location": "/", 
            "text": ".github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}\n\n\n\n\nAbout the Project\n\n\nFabScan is an open source 3D laser scanner. The \nproject\n started in 2010 at \n\nGermany's first FabLab in Aachen\n. The FabScan PI is the next generation of the FabScan 3D Laser Scanner.\n\n\nA Raspberry Pi 2 and a Raspberry Pi camera module are used to turn the FabScan PI into a stand-alone and web-enabled 3D Laser Scanner.\n\n\nQuick Start\n\n\nThe fastest way to use the FabScanPi is to use the FabScanPi Raspbian ISO image. \nConnect all needed hardware parts, download and flash the latest ISO image:\n\n\n\n    \nLatest Release\n\n    \n\n    \n\n    A list of all released images can be found \nhere\n.\n\n    \nSince release v2016-05-15-14-05 the image files are zipped.\n\n\n\n\n\n\n\nYou have to unzip the file to get the .img file. After flashing the image to an SD card point your browser to \nhttp://[ ip-address-of-your-raspberry-pi ]\n\n\nPurchase a Kit\n\n\nYou can purchase the FabScanPi as a kit or in parts at \nWatterott Electronics\n\n\n\n\nFabScanPi Kit\n ( contains all needed parts )\n\n\nFabScanPi HAT\n ( a Raspberry Pi HAT for FabScan )\n\n\nFabScanPi Camera Mount\n ( Raspberry Pi cam mount with LED's)\n\n\nFaBScanPi Case\n ( laser cut wooden case parts )", 
            "title": "Home"
        }, 
        {
            "location": "/#about-the-project", 
            "text": "FabScan is an open source 3D laser scanner. The  project  started in 2010 at  Germany's first FabLab in Aachen . The FabScan PI is the next generation of the FabScan 3D Laser Scanner.  A Raspberry Pi 2 and a Raspberry Pi camera module are used to turn the FabScan PI into a stand-alone and web-enabled 3D Laser Scanner.", 
            "title": "About the Project"
        }, 
        {
            "location": "/#quick-start", 
            "text": "The fastest way to use the FabScanPi is to use the FabScanPi Raspbian ISO image. \nConnect all needed hardware parts, download and flash the latest ISO image:", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#purchase-a-kit", 
            "text": "You can purchase the FabScanPi as a kit or in parts at  Watterott Electronics   FabScanPi Kit  ( contains all needed parts )  FabScanPi HAT  ( a Raspberry Pi HAT for FabScan )  FabScanPi Camera Mount  ( Raspberry Pi cam mount with LED's)  FaBScanPi Case  ( laser cut wooden case parts )", 
            "title": "Purchase a Kit"
        }, 
        {
            "location": "/hardware/", 
            "text": "Bill of Materials\n\n\n\n\nRaspberry Pi 2 or Raspberry Pi 3\n\n\nStepper Motor 1.8\u00b0 step angle (200 steps/revolution)\n\n\nPololu Universal Aluminum Mounting Hub for 5mm Shaft\n\n\nMotor driver (\nSilent Step Stick\n recommended)\n\n\n5V red line laser module\n\n\n9g Servo Motor (not supported by the software now)\n\n\nFabScanPi HAT\n for Raspberry Pi\n\n\nFabScanPi Camera Mount\n with LED ring\n\n\nFaBScanPi Case\n\n\n\n\nHow to Assmble the Cabinet\n\n\nThe laser cut files can be found at \nhttps://github.com/mariolukas/FabScan-Case\n\n\n\n\n\n\nThe FabScanPi HAT\n\n\nThe FabScan HAT is basically a combination of an Arduino and the old\nFabScan Shield for Arduino. It provides all connectors for the hardware\nparts (like motors, servos, lasers, LED's etc.) Instead of an USB \nconnection to the Raspberry Pi, the HAT is put on the Pi's pinheaders.\nThe HAT communicates over a serial connection with the Rasperry Pi. \n(GPIO14 and GPIO15 of the Raspberry Pi). The firmware and also updates are \nflashed automatically by the FabscanPi-Server application.\n\n\n\n\nConnecting the Stepper Motor\n\n\nThere are different kinds of stepper motos. Mostly with 4 or 6 leads. For\nconnecting the stepper motor to the FabScanPi HAT you need to know the\ncorresponding lead pairs of the motor coils. The best way to find out something\nabout the motor is to have a look at the datasheet of the motor manufacturer.\nIn the following desciptions the pairs are called (1A, 1B) and (2A, 2B).\n\n\n \n\n\n\nThere are several ways to find the pair wires without a datasheet. Some of them\nare described here:\n\n\nMethod with an ohm-meter\n\n\nSimply measure pairs of wires for their resistance. If the resistance is a few ohms \n( \n 100 \u03a9) only, you've found a pair. The other two wires should make up the other pair.\n\n\nMethods without an ohm-meter\n\n\nFirst, try turning the motor with your fingers, and notice how hard it is. Then, \nstick wires together in pairs. If the motor turns noticeable harder, you've found a pair.\nAnother method is to use an LED, hold any two wires to the ends of a LED and turn the \nmotor (twiddle in both directions), the LED will light if the wires are a pair, \nswap wires until you light the LED.\n\n\n\n\nConnecting the Lasers\n\n\nThe FabScanPi HAT provides connectors for two lasers. But only one laser\nis supportet until now. Connect your laser to the connectors labeled\nwith ...\n\n\n\n\nSafety switch\n\n\nThere is the possibility to add a laser safety switch which disables the laser\nwhen the lid is opened. The FabScanPi HAT provides a connector for such a switch.\nIf you don't need a switch you still have to bridge this connector with \na cable to get the lasers work. (left image: with bridged connector, \nright image: connecting a switch)\n\n\n\n\n\n\nConnecting the Motor drivers\n\n\nHow to Connect the LED Ring\n\n\nTODO\n\n\nAdditional Motors for the Lasers\n\n\nThere are connectors for", 
            "title": "Hardware"
        }, 
        {
            "location": "/hardware/#bill-of-materials", 
            "text": "Raspberry Pi 2 or Raspberry Pi 3  Stepper Motor 1.8\u00b0 step angle (200 steps/revolution)  Pololu Universal Aluminum Mounting Hub for 5mm Shaft  Motor driver ( Silent Step Stick  recommended)  5V red line laser module  9g Servo Motor (not supported by the software now)  FabScanPi HAT  for Raspberry Pi  FabScanPi Camera Mount  with LED ring  FaBScanPi Case", 
            "title": "Bill of Materials"
        }, 
        {
            "location": "/hardware/#how-to-assmble-the-cabinet", 
            "text": "The laser cut files can be found at  https://github.com/mariolukas/FabScan-Case", 
            "title": "How to Assmble the Cabinet"
        }, 
        {
            "location": "/hardware/#the-fabscanpi-hat", 
            "text": "The FabScan HAT is basically a combination of an Arduino and the old\nFabScan Shield for Arduino. It provides all connectors for the hardware\nparts (like motors, servos, lasers, LED's etc.) Instead of an USB \nconnection to the Raspberry Pi, the HAT is put on the Pi's pinheaders.\nThe HAT communicates over a serial connection with the Rasperry Pi. \n(GPIO14 and GPIO15 of the Raspberry Pi). The firmware and also updates are \nflashed automatically by the FabscanPi-Server application.", 
            "title": "The FabScanPi HAT"
        }, 
        {
            "location": "/hardware/#connecting-the-stepper-motor", 
            "text": "There are different kinds of stepper motos. Mostly with 4 or 6 leads. For\nconnecting the stepper motor to the FabScanPi HAT you need to know the\ncorresponding lead pairs of the motor coils. The best way to find out something\nabout the motor is to have a look at the datasheet of the motor manufacturer.\nIn the following desciptions the pairs are called (1A, 1B) and (2A, 2B).     There are several ways to find the pair wires without a datasheet. Some of them\nare described here:  Method with an ohm-meter  Simply measure pairs of wires for their resistance. If the resistance is a few ohms \n(   100 \u03a9) only, you've found a pair. The other two wires should make up the other pair.  Methods without an ohm-meter  First, try turning the motor with your fingers, and notice how hard it is. Then, \nstick wires together in pairs. If the motor turns noticeable harder, you've found a pair.\nAnother method is to use an LED, hold any two wires to the ends of a LED and turn the \nmotor (twiddle in both directions), the LED will light if the wires are a pair, \nswap wires until you light the LED.", 
            "title": "Connecting the Stepper Motor"
        }, 
        {
            "location": "/hardware/#connecting-the-lasers", 
            "text": "The FabScanPi HAT provides connectors for two lasers. But only one laser\nis supportet until now. Connect your laser to the connectors labeled\nwith ...   Safety switch  There is the possibility to add a laser safety switch which disables the laser\nwhen the lid is opened. The FabScanPi HAT provides a connector for such a switch.\nIf you don't need a switch you still have to bridge this connector with \na cable to get the lasers work. (left image: with bridged connector, \nright image: connecting a switch)", 
            "title": "Connecting the Lasers"
        }, 
        {
            "location": "/hardware/#connecting-the-motor-drivers", 
            "text": "", 
            "title": "Connecting the Motor drivers"
        }, 
        {
            "location": "/hardware/#how-to-connect-the-led-ring", 
            "text": "TODO", 
            "title": "How to Connect the LED Ring"
        }, 
        {
            "location": "/hardware/#additional-motors-for-the-lasers", 
            "text": "There are connectors for", 
            "title": "Additional Motors for the Lasers"
        }, 
        {
            "location": "/software/", 
            "text": "Installing the Software\n\n\nThere ist no need to flash the Arduino firmware. It will be flashed automatically with the current\nfirmware version after the server is started.\n\n\nInstallation with FabScanPi Image (recommended)\n\n\nThe fastest way to start working with FabScan PI is to use the FabScan PI Raspbian Image. \nDowload the image and install it to a SD-Card. After the image is flashed and the Raspberry\nPi is up and runnig follow the instructions in the \nUsage section\n\n\nLatest image release: \n\n\nhttps://github.com/mariolukas/FabScanPi-Build-Raspbian/releases/latest\n\n\nThe image can be build with the FabScanPi Image build script. You will find more \ninformation \nhere\n\n\nInstalling with fresh Raspbian and packages\n\n\nThis description assumes that you have a SD card with a fresh Raspbian image on it. \n\n\nFirst add the fabscan repository to your source list. \n\n\necho \ndeb http://archive.fabscan.org/ jessie main\n \n /etc/apt/sources.list\n\n\n\n\nThen add the FabScan PI repository key to your key chain.\n\n\nwget http://archive.fabscan.org/fabscan.public.key -O - | sudo apt-key add -\n\n\n\n\nUpdate the package list.\n\n\napt-get update\n\n\n\n\nFinish the installation with the needed packages.\n\n\napt-get install fabscanpi-server python-opencv-tbb libtbb2  python-pil python-serial python-pykka python-picamera avrdude\n\n\n\n\nThe FabScan PI server can be started with \n\n\nsudo /etc/init.d/fabscanpi-server start\n\n\n\n\nRead \nUsage\n section for the next steps.\n\n\nInstallation: With Source Code\n\n\nDependencies\n\n\nFabScan PI software depends on some python libraries. You need to install pyserial, pykka, opencv with tbb support \nand picamera. The easiest way to install all dependencies is to use debians package manager apt. Some of the packages, \nlike opencv with tbb support and libtbb are not provided by the official raspbian mirrors. You need to add the\nfabscan repository to your apt source list. \n\n\nBuild Debian package\nInstall dependencies\n\n\nsudo apt-get install build-essential dpkg-dev debhelper devscripts fakeroot cdbs python-setuptools python-support\n\n\n\n\nThe package is build by calling\n\n\nmake deb\n\n\n\n\nAfterwards the package can be installed by \n\n\ndpkg -i fabscabpi-server\npackage-version\n.deb\n\n\n\n\nUpdating the Software\n\n\nUpdates can be installed with debian's apt-get package manager. Log in via ssh and check/install \nupdates with the following command.\n\n\nsudo apt-get update \n apt-get upgrade\n\n\n\n\nConfig File Values\n\n\nA configuration file can be found in /etc/fabscanpi/default.config.json. The content of this file \nis in JSON format and can be edited with an editor of your choice (e.g. nano). Be careful and don't\nmiss brackets. JSON is really sensitive in it's format.\n\n\nFolders\n\n\nIn this section you can change the scan output folder and the folder where the ui is located. If \nyou don't know what you are doing, it is a good decision to keep this section untouched.\n\n\n   \nfolders\n : {\n    \nwww\n: \n/home/pi/fabscan/src/www/\n,\n    \nscans\n: \n/usr/local/fabscanpi/scans/\n\n   }\n\n\n\n\nSerial\n\n\nIn this section you can set your port. By default this value is not set, because the\nFabScanPi Server software autodetcts the correct port. Some Arduino and compatible boards differ \nin the port name. The port can be set if you are not using an Arduino UNO or compatible Board. \nIn case that your Arduino is not detected and you can see an error in the /var/log/fabscanpi/fabscan.log\nyou should add the \"port\" attribute to your config.\n\n\nThe autoflash option is True by default, that means that the firmware is flashed automatically to \nthe Arduino or FabScanPi HAT. If you want to use a custom board e.g. sanguinololu, you can set this\nto False and flash the Firmware manually to your board. \n\n\n   \nserial\n : {\n     \nbaudrate\n : 115200,\n     \nport\n: \n/dev/ttyACM0\n,\n     \nautoflash\n: \nTrue\n\n   }\n\n\n\n\nCamera\n\n\nIn this section some camera values are set. The type can be set to PICAM which is default value. There is \nalso an experimental mode for a C270 webcam. But this mode is not further developed. I used it in early \nversions of fabscanpi. \n\n\nThe device is not used for the PICAM. Only if a webcam is used, you have to set the device to the count number\nof your webcam if you have one or more cameras connected to your pi.\n\n\nPreview Resolution is the resolution value for the settings window. \nResolution is the resolution for the picamera python module. You can have a look to the documentation of \npicamera. If you set this to other values please be sure what you are doing, not all resolutions are supported\nby the picam. Some might lead to slower image capturing. \n\n\nThe position values are used to define where the camera is located in the case. All values are in cm. \nThre is an image later in this documentation which explains all the dimension related meassures. \n\n\nFrame dimension is what your camera sees in the case. An easy way to validate this value is to put a \nruler to the backwall of the fabscan ( i used a paper one from IKEA ). Then activate the settings mode\nand read the last value you can read in the image. The default is 23.5 cm. The default value fits most\nof the FabScan setups. This value is used for tansforming image coordinates to world coordinates. \n\n\n\n\n   \ncamera\n : {\n     \ntype\n : \nPICAM\n,\n     \ndevice\n : 1,\n     \npreview_resolution\n:{\n        \nwidth\n: 320,\n        \nheight\n: 240\n     },\n     \nresolution\n:{\n          \nwidth\n: 1296,\n          \nheight\n:972\n      },\n      \nposition\n:{\n          \nx\n: 0.0,\n          \ny\n: 5.5,\n          \nz\n: 27.6\n      },\n      \nframe\n:{\n          \ndimension\n: 23.5\n      }\n   }\n\n\n\n\nLaser\n\n\nThis section describes the laser position and laser stepper motor values. I mentioned position values in the section \nbefore (Camera), have a look at the image. \n\n\nThe angle is set to the angle which was used in the last scan. The rotation_steps value should be used for a laser \nangle change (not implemented yet).Steps defines how many steps the motor can do. In the default case the motor is \nset to 1/16 step mode. A motor with 200 steps per turn can then perform 3200 steps. \n\n\n   \nlaser\n: {\n      \nposition\n:{\n        \nx\n: 10.0,\n        \ny\n: 7.3,\n        \nz\n: 24.5\n      },\n      \nangle\n: 33.0,\n      \nrotation_steps\n: 5,\n      \nsteps\n: 3200\n   }\n\n\n\n\nTurntable\n\n\nIn this section some turntable related values are set. For positioning have a look to the image. \nSteps defines how many steps can be perfomed for a full rotation. This value depends on your motor and driver.\nIn the default case the motor is set to 1/16 step mode. A motor with 200 steps per turn can then perform 3200 steps.\n\n\n   \nturntable\n:{\n     \nposition\n: {\n       \nx\n: 0.0,\n       \ny\n: 0.0,\n       \nz\n: 7.5\n     },\n     \nsteps\n:3200\n   },\n\n\n\n\nScanner\n\n\nThis section defines global scanner related values. Origin is defined as the green horizontal line in the settings\npreview window. It is a also here a good idea to keep that value untouched. Process number defines how many processes\nshould be used for calculating the scan data. Due the Raspberry Pi2 serves 4 cores it is a good idea to keep this\nvalue. Increasing the proccess number does not mean inrceasing speed in all cases. \nMeshlab is not supported in the curren verision of fabscan pi. So you can leave this value. \n\n\n   \nscanner\n: {\n      \norigin\n:{\n        \ny\n : 0.75\n      }\n   },\n   \nprocess_number\n: 4,\n   \nmeshlab\n:{\n     \npath\n: \n/usr/bin/\n\n   }\n}\n\n\n\n\nFor a first try the default values should be fine. But the values in your setup may be different. To be sure measure your\nsetup and modify the values in your default.conf.json file if needed. \n\n\nY values\n\n\n\nX and Z values\n\n\n\nHow to Edit the Config File\n\n\nRemote access to change the configuration settings\n\n\nIt is most likely that you don't have a monitor nor mouse and keyboard connected to your FabScanPi all the time. But maybe you need to make some changes to the config file from time to time and you don't want to connect the peripherals everytime.\n\n\nThis can be done via a remote PC which is connected to the same network.\n\n\nConnecting as Windows User (Putty)\n\n\nFirst of all you need to download the tiny program \"PuTTY\" from http://www.putty.org/.\n\n\nPuTTY is a SSH client program which establishes the connection to your FabScanPi. There is no no graphic user interface -only a console which allows only the exchange of text. But that's enough to make some changes in the config file or to update your FabScanPi-Software.\n\n\nYou don't need to make an installation just put the putty.exe in a folder or your desktop. Of course you can start it directly from the download folder as well.\n\n\nNow you must know the IP-address which has be assigned to your FabScanPi. It is the same address you're using to get access via the webbrowser (e.g. 192.168.1.8). Usually you can check the current IP-address in the user-interface of your web-router or cable modem.\n\n\nStart \nPutty.exe\n and a window will pop up.\n\n\n\n\nType in your IP-address in the appropriate field and click on \"OPEN\".\n\n\n\n\nNow the console window opens and you must type in \"\npi\n\" as \nlogin-name\n and \"\nraspberry\n\" as \npassword\n (without the quotes). Now you should be able to see the login prompt (similar to the picture above).\n\n\nConnecting as Linux or OSX User (Terminal)\n\n\nLinux users can open a Terminal and type \"\nssh pi@fabscanpi.local\n\"  (\"\nsh pi@ip-address-of-you-pi\n\"). \nNext you are asked for a password. Type in \"\nraspberry\n\" as \npassword\n (without the quotes).\nThe next steps are described with screenshots for Putty, but the workflow is the same once the connection is \nestablished.\n\n\n\n\nChanging the config file.\n\n\nThe config file is in a different folder, so you must change into that folder by entering the command:\n\n\ncd /etc/fabscanpi/\n\n\nand press ENTER.\n\n\nTo view and modify the config file (default.config.json) you must open it with an editor and using administrator rights to be able to save the changes into the same file. The editor which is already installed is called nano. So type in:\n\n\nsudo nano default.config.json\n\n\n\n\nYou have to enter the password \"\nraspberry\n\" (without the quotes) again, because you open the editor with administrator rights.\n\n\nThe nano-editor now displays the config-file and maybe you have to enlarge the window to have a better view.\n\n\nNow you can perform the desired changes by using the keyboard. To navigate you have to use the up-, down-, left- and right-key.\n\n\n\n\nIf you finished your modification press you can save the file by pressing and holding \nCTRL\n and \nO\n (german keyboard: STRG and O). Press RETURN to confirm the filename.\n\n\nNow you can exit the editor by pressing and holding \nCTRL\n and \nX\n (german keyboard: STRG and X).\n\n\nFor the changes to take effect you must restart your FabScanPi by typing in the command\n\n\nsudo reboot\n\n\nand ENTER.\n\n\n\n\nYou can now close the PuTTY window.\n\n\nThe FabScanPi is rebooting and after a short time you can refresh your webbrowser and start using the FabScanPi with the new config settings.\n\n\nTroubleshooting\n\n\nCan not connect to Arduino.\nIs the Arduino connected to the USB port. Check the port in your fabscanpi-server configuration\nfile. Try another port e.g. /dev/ttyUSB0. \nMore information about changing the configuration can be found in \"FabScan Pi Configuration\"\nsection.\n\n\nCamera is not connected. \nCheck the cable from the Raspberry Pi to the camera module. Be careful the cable can be very\nfragil. Try another camera application for checking camera functionality e.g. \nraspistill\n.\n\n\nSetting up a WIFI connection\n\n\nThis description explains howto setup a wifi stick for raspbian. I prefer to use an EDIMAX dongle, it worked best for me. \nFirst plug in your wifi dongle and log in via ssh with password \"raspberry\" (without quotes):\n\n\nssh pi@\nyour-fabscanpi-ip\n\n\n\n\n\nFirst you have to activate the wifi option in your networking setup. \n\n\nsudo nano /etc/network/interfaces\n\n\n\n\nUncomment the folling lines and save the changes. \n\n\nauto wlan0\nallow-hotplug wlan0\niface wlan0 inet dhcp\nwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\niface default inet dhcp\n\n\n\n\nNow restart your network adapters. \n\n\nsudo nano /etc/init.d/networking\n\n\n\n\nIf you type \nsudo ifconfig\n there should be a wlan0 connection in the list. \n\n\nYour fasbcanpi image is ready to go. The only things you have to do is open wpa_supplicant.conf and \ninsert your wifi ssid and your wifi secret.\n\n\nsudo nano /etc/wpa_supplicant/wpa_supplicant.conf\n\n\n\n\nSave the file and try to connect to your wifi by typing the following command.\n\n\nsudo ifup wlan0\n\n\n\n\nIn some cases you have to reboot the Raspberry Pi. Check if the wifi dongle's led is bliking.\nIf you want to change your Raspberry Pi to a fix wifi IP address you have to change the interfaces file\nto get a static wifi connection.\n\n\nsudo nano /etc/network/interfaces\n\n\n\n\nChange the files content from \n\n\nauto lo\niface lo inet loopback\n\nallow-hotplug eth0\niface eth0 inet dhcp\n\nauto wlan0\nallow-hotplug wlan0\niface wlan0 inet dhcp\nwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\niface default inet dhcp\n\n\n\n\nto \n\n\nauto lo\niface lo inet loopback\n\nallow-hotplug eth0\niface eth0 inet dhcp\n\nauto wlan0\nallow-hotplug wlan0\niface wlan0 inet static\naddress \nip in your network\n\nnetmask \nyour netmask\n\ngateway \nyour gateway\n\nwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\niface default inet dhcp\n\n\n\n\nAfter you changed the file you can restart your network daemon.\n\n\nsudo /etc/init.d/networking restart\n\n\n\n\nUsage\n\n\nFabScan Pi is tested on: \n\n\n\n\n\n\n\n\nLogo\n\n\nOS\n\n\nVersions\n\n\n\n\n\n\n\n\n\n\n\n\nOSX, Windows\n\n\n47.0.2526.106 (64-bit)\n\n\n\n\n\n\n\n\nOSX, Windows\n\n\n43.0.4\n\n\n\n\n\n\n\n\nBy default the FabScan PI server binds to all interfaces on port 8080. Pointing your browser to \n\nhttp://ip-of-your-raspbrry-pi:8080\n will open the user interface. If your computer supports bonjour\nyou can point yout browser to \nhttp://fabscanpi.local:8080\n, you can omit the port if you used the SD-Card\nimage.\n\n\nMost Apple devices support bonjour by default. On Windows you can install [Bonjour Print Services for Windows 2.0.2|\n(http://support.apple.com/kb/DL999). You will find more detailed information about this topic for the most common \noperating systems \nhere\n.\n\n\nThe main view provides a camera symbol. By clicking this symbol the live settings dialog appears. On the left side\nis a laser detection preview. Best scan results can be reached, when the red laser line is covered by a blue line.\n\n\n\n\nThe coverage of the lines can be improved by using the different slider settings. A good point to start is the \nthreshold slider. If the environment light is bright, try to set a lower value. If the environment light is low, \nyou should better use a higher slider value. After chnangig the slider have a look at the preview image. The video\nstream leaks for a few milliseconds, sometimes up to a second (depends on the environment lighting). More advanced\nsettings are the camera brightness and contrast settings and if you are using an LED ring/strip of course the \nRGB light setting, which can be used to increase the objects contrast level. A scan can be performed by clicking\nthe scan button in the first settings tab where the threshold and resolution slider are located.\n\n\n\n\nThe resolution slider can be used to set the scan resolution. Sometimes it is better to start with a low resolution\nto control the selected settings result. If the result is nice you can perform a higher resolution scan with the \nsame settings. The current settings are persistent as long as the pi is up and running. The settings are also saved\nwith the scan data after a successful scan. They can be loaded to scan another object with the same settings. E.g. an \nobject what consists of the same material, color etc. \n\n\n\n\nThe sharing dialog can be used to handle the current loaded scan. The sharing dialog provides options to download or \ndelete a scan, and as already mentioned to load the scan settings. \n\n\nPreviously scanned objects can be loaded by calling the load gallery dialog. A gallery of scans appears. By clicking\none of the previously scanned objects loads the scan.", 
            "title": "Software"
        }, 
        {
            "location": "/software/#installing-the-software", 
            "text": "There ist no need to flash the Arduino firmware. It will be flashed automatically with the current\nfirmware version after the server is started.  Installation with FabScanPi Image (recommended)  The fastest way to start working with FabScan PI is to use the FabScan PI Raspbian Image. \nDowload the image and install it to a SD-Card. After the image is flashed and the Raspberry\nPi is up and runnig follow the instructions in the  Usage section  Latest image release:   https://github.com/mariolukas/FabScanPi-Build-Raspbian/releases/latest  The image can be build with the FabScanPi Image build script. You will find more \ninformation  here  Installing with fresh Raspbian and packages  This description assumes that you have a SD card with a fresh Raspbian image on it.   First add the fabscan repository to your source list.   echo  deb http://archive.fabscan.org/ jessie main    /etc/apt/sources.list  Then add the FabScan PI repository key to your key chain.  wget http://archive.fabscan.org/fabscan.public.key -O - | sudo apt-key add -  Update the package list.  apt-get update  Finish the installation with the needed packages.  apt-get install fabscanpi-server python-opencv-tbb libtbb2  python-pil python-serial python-pykka python-picamera avrdude  The FabScan PI server can be started with   sudo /etc/init.d/fabscanpi-server start  Read  Usage  section for the next steps.  Installation: With Source Code  Dependencies  FabScan PI software depends on some python libraries. You need to install pyserial, pykka, opencv with tbb support \nand picamera. The easiest way to install all dependencies is to use debians package manager apt. Some of the packages, \nlike opencv with tbb support and libtbb are not provided by the official raspbian mirrors. You need to add the\nfabscan repository to your apt source list.   Build Debian package\nInstall dependencies  sudo apt-get install build-essential dpkg-dev debhelper devscripts fakeroot cdbs python-setuptools python-support  The package is build by calling  make deb  Afterwards the package can be installed by   dpkg -i fabscabpi-server package-version .deb", 
            "title": "Installing the Software"
        }, 
        {
            "location": "/software/#updating-the-software", 
            "text": "Updates can be installed with debian's apt-get package manager. Log in via ssh and check/install \nupdates with the following command.  sudo apt-get update   apt-get upgrade", 
            "title": "Updating the Software"
        }, 
        {
            "location": "/software/#config-file-values", 
            "text": "A configuration file can be found in /etc/fabscanpi/default.config.json. The content of this file \nis in JSON format and can be edited with an editor of your choice (e.g. nano). Be careful and don't\nmiss brackets. JSON is really sensitive in it's format.  Folders  In this section you can change the scan output folder and the folder where the ui is located. If \nyou don't know what you are doing, it is a good decision to keep this section untouched.      folders  : {\n     www :  /home/pi/fabscan/src/www/ ,\n     scans :  /usr/local/fabscanpi/scans/ \n   }  Serial  In this section you can set your port. By default this value is not set, because the\nFabScanPi Server software autodetcts the correct port. Some Arduino and compatible boards differ \nin the port name. The port can be set if you are not using an Arduino UNO or compatible Board. \nIn case that your Arduino is not detected and you can see an error in the /var/log/fabscanpi/fabscan.log\nyou should add the \"port\" attribute to your config.  The autoflash option is True by default, that means that the firmware is flashed automatically to \nthe Arduino or FabScanPi HAT. If you want to use a custom board e.g. sanguinololu, you can set this\nto False and flash the Firmware manually to your board.       serial  : {\n      baudrate  : 115200,\n      port :  /dev/ttyACM0 ,\n      autoflash :  True \n   }  Camera  In this section some camera values are set. The type can be set to PICAM which is default value. There is \nalso an experimental mode for a C270 webcam. But this mode is not further developed. I used it in early \nversions of fabscanpi.   The device is not used for the PICAM. Only if a webcam is used, you have to set the device to the count number\nof your webcam if you have one or more cameras connected to your pi.  Preview Resolution is the resolution value for the settings window. \nResolution is the resolution for the picamera python module. You can have a look to the documentation of \npicamera. If you set this to other values please be sure what you are doing, not all resolutions are supported\nby the picam. Some might lead to slower image capturing.   The position values are used to define where the camera is located in the case. All values are in cm. \nThre is an image later in this documentation which explains all the dimension related meassures.   Frame dimension is what your camera sees in the case. An easy way to validate this value is to put a \nruler to the backwall of the fabscan ( i used a paper one from IKEA ). Then activate the settings mode\nand read the last value you can read in the image. The default is 23.5 cm. The default value fits most\nof the FabScan setups. This value is used for tansforming image coordinates to world coordinates.        camera  : {\n      type  :  PICAM ,\n      device  : 1,\n      preview_resolution :{\n         width : 320,\n         height : 240\n     },\n      resolution :{\n           width : 1296,\n           height :972\n      },\n       position :{\n           x : 0.0,\n           y : 5.5,\n           z : 27.6\n      },\n       frame :{\n           dimension : 23.5\n      }\n   }  Laser  This section describes the laser position and laser stepper motor values. I mentioned position values in the section \nbefore (Camera), have a look at the image.   The angle is set to the angle which was used in the last scan. The rotation_steps value should be used for a laser \nangle change (not implemented yet).Steps defines how many steps the motor can do. In the default case the motor is \nset to 1/16 step mode. A motor with 200 steps per turn can then perform 3200 steps.       laser : {\n       position :{\n         x : 10.0,\n         y : 7.3,\n         z : 24.5\n      },\n       angle : 33.0,\n       rotation_steps : 5,\n       steps : 3200\n   }  Turntable  In this section some turntable related values are set. For positioning have a look to the image. \nSteps defines how many steps can be perfomed for a full rotation. This value depends on your motor and driver.\nIn the default case the motor is set to 1/16 step mode. A motor with 200 steps per turn can then perform 3200 steps.      turntable :{\n      position : {\n        x : 0.0,\n        y : 0.0,\n        z : 7.5\n     },\n      steps :3200\n   },  Scanner  This section defines global scanner related values. Origin is defined as the green horizontal line in the settings\npreview window. It is a also here a good idea to keep that value untouched. Process number defines how many processes\nshould be used for calculating the scan data. Due the Raspberry Pi2 serves 4 cores it is a good idea to keep this\nvalue. Increasing the proccess number does not mean inrceasing speed in all cases. \nMeshlab is not supported in the curren verision of fabscan pi. So you can leave this value.       scanner : {\n       origin :{\n         y  : 0.75\n      }\n   },\n    process_number : 4,\n    meshlab :{\n      path :  /usr/bin/ \n   }\n}  For a first try the default values should be fine. But the values in your setup may be different. To be sure measure your\nsetup and modify the values in your default.conf.json file if needed.   Y values  X and Z values", 
            "title": "Config File Values"
        }, 
        {
            "location": "/software/#how-to-edit-the-config-file", 
            "text": "Remote access to change the configuration settings  It is most likely that you don't have a monitor nor mouse and keyboard connected to your FabScanPi all the time. But maybe you need to make some changes to the config file from time to time and you don't want to connect the peripherals everytime.  This can be done via a remote PC which is connected to the same network.  Connecting as Windows User (Putty)  First of all you need to download the tiny program \"PuTTY\" from http://www.putty.org/.  PuTTY is a SSH client program which establishes the connection to your FabScanPi. There is no no graphic user interface -only a console which allows only the exchange of text. But that's enough to make some changes in the config file or to update your FabScanPi-Software.  You don't need to make an installation just put the putty.exe in a folder or your desktop. Of course you can start it directly from the download folder as well.  Now you must know the IP-address which has be assigned to your FabScanPi. It is the same address you're using to get access via the webbrowser (e.g. 192.168.1.8). Usually you can check the current IP-address in the user-interface of your web-router or cable modem.  Start  Putty.exe  and a window will pop up.   Type in your IP-address in the appropriate field and click on \"OPEN\".   Now the console window opens and you must type in \" pi \" as  login-name  and \" raspberry \" as  password  (without the quotes). Now you should be able to see the login prompt (similar to the picture above).  Connecting as Linux or OSX User (Terminal)  Linux users can open a Terminal and type \" ssh pi@fabscanpi.local \"  (\" sh pi@ip-address-of-you-pi \"). \nNext you are asked for a password. Type in \" raspberry \" as  password  (without the quotes).\nThe next steps are described with screenshots for Putty, but the workflow is the same once the connection is \nestablished.   Changing the config file.  The config file is in a different folder, so you must change into that folder by entering the command:  cd /etc/fabscanpi/  and press ENTER.  To view and modify the config file (default.config.json) you must open it with an editor and using administrator rights to be able to save the changes into the same file. The editor which is already installed is called nano. So type in:  sudo nano default.config.json   You have to enter the password \" raspberry \" (without the quotes) again, because you open the editor with administrator rights.  The nano-editor now displays the config-file and maybe you have to enlarge the window to have a better view.  Now you can perform the desired changes by using the keyboard. To navigate you have to use the up-, down-, left- and right-key.   If you finished your modification press you can save the file by pressing and holding  CTRL  and  O  (german keyboard: STRG and O). Press RETURN to confirm the filename.  Now you can exit the editor by pressing and holding  CTRL  and  X  (german keyboard: STRG and X).  For the changes to take effect you must restart your FabScanPi by typing in the command  sudo reboot  and ENTER.   You can now close the PuTTY window.  The FabScanPi is rebooting and after a short time you can refresh your webbrowser and start using the FabScanPi with the new config settings.", 
            "title": "How to Edit the Config File"
        }, 
        {
            "location": "/software/#troubleshooting", 
            "text": "Can not connect to Arduino.\nIs the Arduino connected to the USB port. Check the port in your fabscanpi-server configuration\nfile. Try another port e.g. /dev/ttyUSB0. \nMore information about changing the configuration can be found in \"FabScan Pi Configuration\"\nsection.  Camera is not connected. \nCheck the cable from the Raspberry Pi to the camera module. Be careful the cable can be very\nfragil. Try another camera application for checking camera functionality e.g.  raspistill .", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/software/#setting-up-a-wifi-connection", 
            "text": "This description explains howto setup a wifi stick for raspbian. I prefer to use an EDIMAX dongle, it worked best for me. \nFirst plug in your wifi dongle and log in via ssh with password \"raspberry\" (without quotes):  ssh pi@ your-fabscanpi-ip   First you have to activate the wifi option in your networking setup.   sudo nano /etc/network/interfaces  Uncomment the folling lines and save the changes.   auto wlan0\nallow-hotplug wlan0\niface wlan0 inet dhcp\nwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\niface default inet dhcp  Now restart your network adapters.   sudo nano /etc/init.d/networking  If you type  sudo ifconfig  there should be a wlan0 connection in the list.   Your fasbcanpi image is ready to go. The only things you have to do is open wpa_supplicant.conf and \ninsert your wifi ssid and your wifi secret.  sudo nano /etc/wpa_supplicant/wpa_supplicant.conf  Save the file and try to connect to your wifi by typing the following command.  sudo ifup wlan0  In some cases you have to reboot the Raspberry Pi. Check if the wifi dongle's led is bliking.\nIf you want to change your Raspberry Pi to a fix wifi IP address you have to change the interfaces file\nto get a static wifi connection.  sudo nano /etc/network/interfaces  Change the files content from   auto lo\niface lo inet loopback\n\nallow-hotplug eth0\niface eth0 inet dhcp\n\nauto wlan0\nallow-hotplug wlan0\niface wlan0 inet dhcp\nwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\niface default inet dhcp  to   auto lo\niface lo inet loopback\n\nallow-hotplug eth0\niface eth0 inet dhcp\n\nauto wlan0\nallow-hotplug wlan0\niface wlan0 inet static\naddress  ip in your network \nnetmask  your netmask \ngateway  your gateway \nwpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\niface default inet dhcp  After you changed the file you can restart your network daemon.  sudo /etc/init.d/networking restart", 
            "title": "Setting up a WIFI connection"
        }, 
        {
            "location": "/software/#usage", 
            "text": "FabScan Pi is tested on:      Logo  OS  Versions       OSX, Windows  47.0.2526.106 (64-bit)     OSX, Windows  43.0.4     By default the FabScan PI server binds to all interfaces on port 8080. Pointing your browser to  http://ip-of-your-raspbrry-pi:8080  will open the user interface. If your computer supports bonjour\nyou can point yout browser to  http://fabscanpi.local:8080 , you can omit the port if you used the SD-Card\nimage.  Most Apple devices support bonjour by default. On Windows you can install [Bonjour Print Services for Windows 2.0.2|\n(http://support.apple.com/kb/DL999). You will find more detailed information about this topic for the most common \noperating systems  here .  The main view provides a camera symbol. By clicking this symbol the live settings dialog appears. On the left side\nis a laser detection preview. Best scan results can be reached, when the red laser line is covered by a blue line.   The coverage of the lines can be improved by using the different slider settings. A good point to start is the \nthreshold slider. If the environment light is bright, try to set a lower value. If the environment light is low, \nyou should better use a higher slider value. After chnangig the slider have a look at the preview image. The video\nstream leaks for a few milliseconds, sometimes up to a second (depends on the environment lighting). More advanced\nsettings are the camera brightness and contrast settings and if you are using an LED ring/strip of course the \nRGB light setting, which can be used to increase the objects contrast level. A scan can be performed by clicking\nthe scan button in the first settings tab where the threshold and resolution slider are located.   The resolution slider can be used to set the scan resolution. Sometimes it is better to start with a low resolution\nto control the selected settings result. If the result is nice you can perform a higher resolution scan with the \nsame settings. The current settings are persistent as long as the pi is up and running. The settings are also saved\nwith the scan data after a successful scan. They can be loaded to scan another object with the same settings. E.g. an \nobject what consists of the same material, color etc.    The sharing dialog can be used to handle the current loaded scan. The sharing dialog provides options to download or \ndelete a scan, and as already mentioned to load the scan settings.   Previously scanned objects can be loaded by calling the load gallery dialog. A gallery of scans appears. By clicking\none of the previously scanned objects loads the scan.", 
            "title": "Usage"
        }, 
        {
            "location": "/developing/", 
            "text": "FabScan PI Server\n\n\nThe FabScan PI server code is located in this repository. The folder src/www contains the latest version of the \nFabScan PI web interface. \n\n\nInstall build dependencies with \napt-get install build-essential python-setuptools debhelper cdbs\n\n\nAfterwards the deb files can be build by calling \nmake deb\n\n\nFabScan PI Web Interface\n\n\nThe FabScan PI Web Interface is included in the server package. Developers can find the current code at \n\n\nhttp://github.com/mariolukas/\n\n\nThe web interface is located at /usr/local/fabscanpi-server/www/ \n\n\nFor further information have a look at the repository. \n\n\nBuilding FabScanPi Images", 
            "title": "Developing"
        }, 
        {
            "location": "/developing/#fabscan-pi-server", 
            "text": "The FabScan PI server code is located in this repository. The folder src/www contains the latest version of the \nFabScan PI web interface.   Install build dependencies with  apt-get install build-essential python-setuptools debhelper cdbs  Afterwards the deb files can be build by calling  make deb", 
            "title": "FabScan PI Server"
        }, 
        {
            "location": "/developing/#fabscan-pi-web-interface", 
            "text": "The FabScan PI Web Interface is included in the server package. Developers can find the current code at   http://github.com/mariolukas/  The web interface is located at /usr/local/fabscanpi-server/www/   For further information have a look at the repository.", 
            "title": "FabScan PI Web Interface"
        }, 
        {
            "location": "/developing/#building-fabscanpi-images", 
            "text": "", 
            "title": "Building FabScanPi Images"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing to this project\n\n\nPlease take a moment to review this document in order to make the contribution\nprocess easy and effective for everyone involved.\n\n\nFollowing these guidelines helps to communicate that you respect the time of\nthe developers managing and developing this open source project. In return,\nthey should reciprocate that respect in addressing your issue or assessing\npatches and features.\n\n\nUsing the issue tracker\n\n\nThe issue tracker is the preferred channel for \nbug reports\n,\n\nfeatures requests\n and \nsubmitting pull\nrequests\n, but please respect the following restrictions:\n\n\n\n\n\n\nPlease \ndo not\n use the issue tracker for personal support requests (use\n  \nFabScan Group\n or \nSlack\n).\n\n\n\n\n\n\nPlease \ndo not\n derail or troll issues. Keep the discussion on topic and\n  respect the opinions of others.\n\n\n\n\n\n\n\n\nBug reports\n\n\nA bug is a \ndemonstrable problem\n that is caused by the code in the repository.\nGood bug reports are extremely helpful - thank you!\n\n\nGuidelines for bug reports:\n\n\n\n\n\n\nUse the GitHub issue search\n \n check if the issue has already been\n   reported.\n\n\n\n\n\n\nCheck if the issue has been fixed\n \n try to reproduce it using the\n   latest \nmaster\n or development branch in the repository.\n\n\n\n\n\n\nIsolate the problem\n \n create a \nreduced test\n   case\n and a live example.\n\n\n\n\n\n\nA good bug report shouldn't leave others needing to chase you up for more\ninformation. Please try to be as detailed as possible in your report. What is\nyour environment? What steps will reproduce the issue? What browser(s) and OS\nexperience the problem? What would you expect to be the outcome? All these\ndetails will help people to fix any potential bugs.\n\n\nExample:\n\n\n\n\nShort and descriptive example bug report title\n\n\nA summary of the issue and the browser/OS environment in which it occurs. If\nsuitable, include the steps required to reproduce the bug.\n\n\n\n\nThis is the first step\n\n\nThis is the second step\n\n\nFurther steps, etc.\n\n\n\n\nurl\n - a link to the reduced test case\n\n\nAny other information you want to share that is relevant to the issue being\nreported. This might include the lines of code that you have identified as\ncausing the bug, and potential solutions (and your opinions on their\nmerits).\n\n\n\n\n\n\nFeature requests\n\n\nFeature requests are welcome. But take a moment to find out whether your idea\nfits with the scope and aims of the project. It's up to \nyou\n to make a strong\ncase to convince the project's developers of the merits of this feature. Please\nprovide as much detail and context as possible.\n\n\n\n\nPull requests\n\n\nGood pull requests - patches, improvements, new features - are a fantastic\nhelp. They should remain focused in scope and avoid containing unrelated\ncommits.\n\n\nPlease ask first\n before embarking on any significant pull request (e.g.\nimplementing features, refactoring code, porting to a different language),\notherwise you risk spending a lot of time working on something that the\nproject's developers might not want to merge into the project.\n\n\nPlease adhere to the coding conventions used throughout a project (indentation,\naccurate comments, etc.) and any other requirements (such as test coverage).\n\n\nFollow this process if you'd like your work considered for inclusion in the\nproject:\n\n\n\n\nFork\n the project, clone your fork,\n   and configure the remotes:\n\n\n\n\nbash\n   # Clone your fork of the repo into the current directory\n   git clone https://github.com/\nyour-username\n/\nrepo-name\n\n   # Navigate to the newly cloned directory\n   cd \nrepo-name\n\n   # Assign the original repo to a remote called \"upstream\"\n   git remote add upstream https://github.com/\nupstream-owner\n/\nrepo-name\n\n\n\n\nIf you cloned a while ago, get the latest changes from upstream:\n\n\n\n\nbash\n   git checkout \ndev-branch\n\n   git pull upstream \ndev-branch\n\n\n\n\nCreate a new topic branch (off the main project development branch) to\n   contain your feature, change, or fix:\n\n\n\n\nbash\n   git checkout -b \ntopic-branch-name\n\n\n\n\n\n\nCommit your changes in logical chunks. Please adhere to these \ngit commit\n   message guidelines\n\n   or your code is unlikely be merged into the main project. Use Git's\n   \ninteractive rebase\n\n   feature to tidy up your commits before making them public.\n\n\n\n\n\n\nLocally merge (or rebase) the upstream development branch into your topic branch:\n\n\n\n\n\n\nbash\n   git pull [--rebase] upstream \ndev-branch\n\n\n\n\nPush your topic branch up to your fork:\n\n\n\n\nbash\n   git push origin \ntopic-branch-name\n\n\n\n\nOpen a Pull Request\n\n    with a clear title and description.\n\n\n\n\nIMPORTANT\n: By submitting a patch, you agree to allow the project owner to\nlicense your work under the same license as that used by the project.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing-to-this-project", 
            "text": "Please take a moment to review this document in order to make the contribution\nprocess easy and effective for everyone involved.  Following these guidelines helps to communicate that you respect the time of\nthe developers managing and developing this open source project. In return,\nthey should reciprocate that respect in addressing your issue or assessing\npatches and features.", 
            "title": "Contributing to this project"
        }, 
        {
            "location": "/contributing/#using-the-issue-tracker", 
            "text": "The issue tracker is the preferred channel for  bug reports , features requests  and  submitting pull\nrequests , but please respect the following restrictions:    Please  do not  use the issue tracker for personal support requests (use\n   FabScan Group  or  Slack ).    Please  do not  derail or troll issues. Keep the discussion on topic and\n  respect the opinions of others.", 
            "title": "Using the issue tracker"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "A bug is a  demonstrable problem  that is caused by the code in the repository.\nGood bug reports are extremely helpful - thank you!  Guidelines for bug reports:    Use the GitHub issue search    check if the issue has already been\n   reported.    Check if the issue has been fixed    try to reproduce it using the\n   latest  master  or development branch in the repository.    Isolate the problem    create a  reduced test\n   case  and a live example.    A good bug report shouldn't leave others needing to chase you up for more\ninformation. Please try to be as detailed as possible in your report. What is\nyour environment? What steps will reproduce the issue? What browser(s) and OS\nexperience the problem? What would you expect to be the outcome? All these\ndetails will help people to fix any potential bugs.  Example:   Short and descriptive example bug report title  A summary of the issue and the browser/OS environment in which it occurs. If\nsuitable, include the steps required to reproduce the bug.   This is the first step  This is the second step  Further steps, etc.   url  - a link to the reduced test case  Any other information you want to share that is relevant to the issue being\nreported. This might include the lines of code that you have identified as\ncausing the bug, and potential solutions (and your opinions on their\nmerits).", 
            "title": "Bug reports"
        }, 
        {
            "location": "/contributing/#feature-requests", 
            "text": "Feature requests are welcome. But take a moment to find out whether your idea\nfits with the scope and aims of the project. It's up to  you  to make a strong\ncase to convince the project's developers of the merits of this feature. Please\nprovide as much detail and context as possible.", 
            "title": "Feature requests"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Good pull requests - patches, improvements, new features - are a fantastic\nhelp. They should remain focused in scope and avoid containing unrelated\ncommits.  Please ask first  before embarking on any significant pull request (e.g.\nimplementing features, refactoring code, porting to a different language),\notherwise you risk spending a lot of time working on something that the\nproject's developers might not want to merge into the project.  Please adhere to the coding conventions used throughout a project (indentation,\naccurate comments, etc.) and any other requirements (such as test coverage).  Follow this process if you'd like your work considered for inclusion in the\nproject:   Fork  the project, clone your fork,\n   and configure the remotes:   bash\n   # Clone your fork of the repo into the current directory\n   git clone https://github.com/ your-username / repo-name \n   # Navigate to the newly cloned directory\n   cd  repo-name \n   # Assign the original repo to a remote called \"upstream\"\n   git remote add upstream https://github.com/ upstream-owner / repo-name   If you cloned a while ago, get the latest changes from upstream:   bash\n   git checkout  dev-branch \n   git pull upstream  dev-branch   Create a new topic branch (off the main project development branch) to\n   contain your feature, change, or fix:   bash\n   git checkout -b  topic-branch-name    Commit your changes in logical chunks. Please adhere to these  git commit\n   message guidelines \n   or your code is unlikely be merged into the main project. Use Git's\n    interactive rebase \n   feature to tidy up your commits before making them public.    Locally merge (or rebase) the upstream development branch into your topic branch:    bash\n   git pull [--rebase] upstream  dev-branch   Push your topic branch up to your fork:   bash\n   git push origin  topic-branch-name   Open a Pull Request \n    with a clear title and description.   IMPORTANT : By submitting a patch, you agree to allow the project owner to\nlicense your work under the same license as that used by the project.", 
            "title": "Pull requests"
        }, 
        {
            "location": "/community/", 
            "text": "Slack\n\n\nUse the FabScan Slack channel for direct messaging and chat communication. \n\n\n\n\nGoogle Group\n\n\nFor general problems and information use the FabScan google group. \n\nhttps://groups.google.com/forum/#!forum/fabscan\n\n\nFacebook\n\n\nLike our Facebook Page.\n\nhttps://www.facebook.com/Fabscan\n\n\nTwitter\n\n\nTweets about FabScan can be found on Twitter. \n\nhttps://www.twitter.com/l_k3", 
            "title": "Community"
        }, 
        {
            "location": "/community/#slack", 
            "text": "Use the FabScan Slack channel for direct messaging and chat communication.", 
            "title": "Slack"
        }, 
        {
            "location": "/community/#google-group", 
            "text": "For general problems and information use the FabScan google group.  https://groups.google.com/forum/#!forum/fabscan", 
            "title": "Google Group"
        }, 
        {
            "location": "/community/#facebook", 
            "text": "Like our Facebook Page. https://www.facebook.com/Fabscan", 
            "title": "Facebook"
        }, 
        {
            "location": "/community/#twitter", 
            "text": "Tweets about FabScan can be found on Twitter.  https://www.twitter.com/l_k3", 
            "title": "Twitter"
        }, 
        {
            "location": "/faq/", 
            "text": "TODO", 
            "title": "F.A.Q"
        }
    ]
}